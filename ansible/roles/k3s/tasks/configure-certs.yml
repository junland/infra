#
# Configures the k3s installation to use custom certificates for the domain
#

# Check if domain certificate file is present on the file system
- name: Check if domain certificate file is present on the file system
  stat:
      path: "/etc/pki/ca-trust/source/anchors/{{ k3s_domain }}.pem"
  register: domain_cert_file
  when:
      - k3s_domain is defined
      - k3s_domain != ""
      - k3s_install_exec == "server"

# Check if domain key is present on the file system
- name: Check if domain key file is present on the file system
  stat:
      path: "/etc/pki/tls/private/{{ k3s_domain }}.key"
  register: domain_key_file
  when:
      - k3s_domain is defined
      - k3s_domain != ""
      - k3s_install_exec == "server"

# Check if certificate and key secret have been added with kubectl
- name: Check if certificate and key secret have been added with kubectl
  command: "kubectl get secret -n haproxy-ingress {{ k3s_domain_tls_secret_name}} -o name"
  register: cert_key_secret
  changed_when: false
  failed_when: false
  when:
      - k3s_domain is defined
      - k3s_domain != ""
      - k3s_install_exec == "server"
      - domain_cert_file is defined
      - domain_key_file is defined
      - domain_cert_file.stat.exists == true
      - domain_key_file.stat.exists == true

# Set expected secret name for comparison
- name: Set expected secret name
  ansible.builtin.set_fact:
      expected_secret_name: "secret/{{ k3s_domain_tls_secret_name }}"
  when:
      - k3s_domain is defined
      - k3s_domain != ""
      - k3s_install_exec == "server"

# Create the tls secret if it does not exist
- name: Create the tls secret if it does not exist
  ansible.builtin.command:
      cmd: "kubectl create secret tls {{ k3s_domain_tls_secret_name}} --cert=/etc/pki/ca-trust/source/anchors/{{ k3s_domain }}.pem --key=/etc/pki/tls/private/{{ k3s_domain }}.key -n haproxy-ingress"
  when:
      - k3s_domain is defined
      - k3s_domain != ""
      - k3s_install_exec == "server"
      - domain_cert_file is defined
      - domain_key_file is defined
      - domain_cert_file.stat.exists == true
      - domain_key_file.stat.exists == true
      - cert_key_secret is defined
      - cert_key_secret.rc != 0

# Upload haproxy config with jinja2 template
- name: Upload haproxy config with jinja2 template
  ansible.builtin.template:
      src: haproxy-config.j2
      dest: /tmp/haproxy-config.yaml
      mode: "0644"
  when:
      - k3s_install_exec == "server"

# Apply haproxy config
- name: Apply haproxy config
  ansible.builtin.command:
      cmd: "kubectl apply -f /tmp/haproxy-config.yaml"
  when:
      - k3s_install_exec == "server"
